@charset "UTF-8";
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent displaying `audio` without controls in Mobile Safari 4/5/6/7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address inconsistent styling of `abbr[title]`.
 * 1. Correct styling in Firefox 39 and Opera 12.
 * 2. Correct missing styling in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Address inconsistent styling of b and strong.
 * 1. Correct duplicate application of `bolder` in Safari 6.0.2.
 * 2. Correct style set to `bold` in Edge 12+, Safari 6.2+, and Chrome 18+.
 */
b,
strong {
  font-weight: inherit;
  /* 1 */ }

b,
strong {
  font-weight: bolder;
  /* 2 */ }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address inconsistent styling of `hr`.
 * 1. Correct `box-sizing` set to `border-box` in Firefox.
 * 2. Correct `overflow` set to `hidden` in IE 8/9/10/11 and Edge 12.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * 1. Correct inheritance and scaling of font-size for preformatted text.
 * 2. Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct font properties not being inherited.
 * 2. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Restore focus style in Firefox 4+ (unset by a rule above)
 */
button:-moz-focusring,
input:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * Address `appearance` set to `searchfield` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Restore font weight (unset by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/*!
Typeplate : Starter Kit
URL ........... http://typeplate.com
Version ....... 2.1.0
Github ........ https://github.com/typeplate/starter-kit
Authors ....... Dennis Gaebel (@gryghostvisuals) & Zachary Kain (@zakkain)
License ....... Creative Commmons Attribution 3.0
License URL ... https://github.com/typeplate/starter-kit/blob/master/license.txt
*/
@font-face {
  font-family: "Ampersand";
  src: local("Georgia"), local("Garamond"), local("Palatino"), local("Book Antiqua");
  unicode-range: U+0026; }

@font-face {
  font-family: "Ampersand";
  src: local("Georgia");
  unicode-range: U+270C; }

.typl8-tera, .typl8-giga, .typl8-mega, h1, .typl8-alpha, h2, .typl8-beta, h3, .typl8-gamma, h4, .typl8-delta, h5, .typl8-epsilon, .typl8-zeta, h6 {
  text-rendering: optimizeLegibility;
  line-height: 1;
  margin-top: 0;
  color: #222; }

blockquote + figcaption cite {
  display: block;
  font-size: inherit;
  text-align: right; }

body {
  word-wrap: break-word; }

pre code {
  word-wrap: normal; }

html {
  font: normal 112.5% / 1.65 "Source Sans Pro", sans-serif; }

body {
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
  color: #444; }

.typl8-tera {
  font-size: 117px;
  font-size: 6.5rem;
  margin-bottom: 70.90909px;
  margin-bottom: 3.93939rem; }

.typl8-giga {
  font-size: 90px;
  font-size: 5rem;
  margin-bottom: 54.54545px;
  margin-bottom: 3.0303rem; }

.typl8-mega, h1 {
  font-size: 72px;
  font-size: 4rem;
  margin-bottom: 43.63636px;
  margin-bottom: 2.42424rem; }

.typl8-alpha, h2 {
  font-size: 60px;
  font-size: 3.33333rem;
  margin-bottom: 36.36364px;
  margin-bottom: 2.0202rem; }

.typl8-beta, h3 {
  font-size: 48px;
  font-size: 2.66667rem;
  margin-bottom: 29.09091px;
  margin-bottom: 1.61616rem; }

.typl8-gamma, h4 {
  font-size: 36px;
  font-size: 2rem;
  margin-bottom: 21.81818px;
  margin-bottom: 1.21212rem; }

.typl8-delta, h5 {
  font-size: 24px;
  font-size: 1.33333rem;
  margin-bottom: 14.54545px;
  margin-bottom: 0.80808rem; }

.typl8-epsilon {
  font-size: 21px;
  font-size: 1.16667rem;
  margin-bottom: 12.72727px;
  margin-bottom: 0.70707rem; }

.typl8-zeta, h6 {
  font-size: 18px;
  font-size: 1rem;
  margin-bottom: 10.90909px;
  margin-bottom: 0.60606rem; }

p {
  margin: auto auto 1.5em; }
  p + p {
    text-indent: 1.5em;
    margin-top: -1.5em; }

small {
  font-size: 65%; }

input,
abbr,
acronym,
blockquote,
code,
kbd,
q,
samp,
var {
  -webkit-hyphens: none;
  -ms-hyphens: none;
  hyphens: none; }

pre {
  white-space: pre; }
  pre code {
    white-space: -moz-pre-wrap;
    white-space: pre-wrap; }

code {
  white-space: pre;
  font-family: monospace; }

abbr {
  -webkit-font-variant: small-caps;
  -moz-font-variant: small-caps;
  -ms-font-variant: small-caps;
  font-variant: small-caps;
  font-weight: 600;
  text-transform: lowercase;
  color: gray; }
  abbr[title]:hover {
    cursor: help; }

.typl8-drop-cap:first-letter {
  float: left;
  margin: 10px 10px 0 0;
  padding: 0 20px;
  font-size: 4em;
  font-family: inherit;
  line-height: 1;
  text-indent: 0;
  background: transparent;
  color: inherit; }

p + .typl8-drop-cap {
  text-indent: 0;
  margin-top: 0; }

/**
 * Lining Definition Style Markup
 *
  <dl class="typl8-lining">
    <dt><b></b></dt>
    <dd></dd>
  </dl>
 *
 * Extend this object into your markup.
 *
 */
.typl8-lining dt,
.typl8-lining dd {
  display: inline;
  margin: 0; }

.typl8-lining dt + dt:before,
.typl8-lining dd + dt:before {
  content: "\A";
  white-space: pre; }

.typl8-lining dd + dd:before {
  content: ", "; }

.typl8-lining dd:before {
  content: ": ";
  margin-left: -0.2rem; }

/**
 * Dictionary Definition Style Markup
 *
  <dl class="typl8-dictionary-style">
    <dt><b></b></dt>
    <dd></dd>
  </dl>
 *
 * Extend this object into your markup.
 *
 */
.typl8-dictionary-style dt {
  display: inline;
  counter-reset: definitions; }
  .typl8-dictionary-style dt + dt:before {
    content: ", ";
    margin-left: -0.2rem; }

.typl8-dictionary-style dd {
  display: block;
  counter-increment: definitions; }
  .typl8-dictionary-style dd:before {
    content: counter(definitions, decimal) ". "; }

/**
 * Blockquote Markup
 *
    <figure>
      <blockquote cite="">
        <p></p>
      </blockquote>
      <figcaption>
        <cite>
          <small><a href=""></a></small>
        </cite>
      </figcaption>
    </figure>
 *
 * Extend this object into your markup.
 *
 */
/**
 * Pull Quotes Markup
 *
  <aside class="typl8-pull-quote">
    <blockquote>
      <p></p>
    </blockquote>
  </aside>
 *
 * Extend this object into your custom stylesheet.
 *
 */
.typl8-pull-quote {
  position: relative;
  padding: 1em; }
  .typl8-pull-quote:before, .typl8-pull-quote:after {
    height: 1em;
    opacity: 0.5;
    position: absolute;
    font-size: 4em;
    color: #dc976e; }
  .typl8-pull-quote:before {
    content: '“';
    top: 0;
    left: 0; }
  .typl8-pull-quote:after {
    content: '”';
    bottom: 0;
    right: 0; }

/**
 * Figures Markup
 *
  <figure>
    <figcaption>
      <strong>Fig. X.X | </strong><cite title=""></cite>
    </figcaption>
  </figure>
 *
 * Extend this object into your markup.
 *
 */
/**
 * Footnote Markup : Replace 'X' with your unique number for each footnote
 *
  <article>
    <p><sup><a href="#fn-itemX" id="fn-returnX"></a></sup></p>
    <footer>
      <ol class="foot-notes">
        <li id="fn-itemX"><a href="#fn-returnX">↩</a></li>
      </ol>
    </footer>
  </article>
 *
 * Extend this object into your markup.
 *
 */

/*# sourceMappingURL=data:application/json;base64, */
